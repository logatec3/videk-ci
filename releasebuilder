#!/usr/bin/env python3

import os
import sys
import traceback
import subprocess

tag_name = sys.argv[1]
upload_url = sys.argv[2]
repository_name = sys.argv[3]
repository_url = sys.argv[4]
github_token = sys.argv[5]

header = "Content-Type:application/zip"
header_auth = "Authorization: token {}".format(github_token)

def logging(log):
    try:
        log = log.decode("utf-8")
    except (UnicodeDecodeError, AttributeError):
        pass

    with open(tag_name+'/out/build.log', 'a') as f:
        f.write(str(log) + '\n')

if not os.path.isdir(tag_name+"/out"):
    subprocess.call(["mkdir", "-p", tag_name+"/out"])
else:
    sys.exit()

repository_url_token = repository_url.replace('github', github_token+"@"+"github", 1)

logging("build pending ...")

try:
    out_clone = subprocess.check_output(["git", "clone", "-b", tag_name, "--depth", "1", repository_url_token], cwd=tag_name, stderr=subprocess.STDOUT)
    logging(out_clone)
except:
    logging(traceback.format_exc())
    pass

cmd = "cd " + tag_name+"/"+repository_name + "; make cd"
out_build = subprocess.Popen([cmd], stderr=subprocess.PIPE, stdout=subprocess.PIPE, shell=True)
output, errors = out_build.communicate()
logging(output)
logging(errors)

try:
    out_zip = subprocess.check_output(["zip", "-r", "build-results.zip", "out"], cwd=tag_name, stderr=subprocess.STDOUT)
    logging(out_zip)
except:
    logging(traceback.format_exc())
    pass

try:
    out_upload = subprocess.check_output(["curl", "-XPOST", "-H", header, "-H", header_auth, "--data-binary", "@build-results.zip", upload_url+"?name=build-results.zip"], cwd=tag_name, stderr=subprocess.STDOUT)
    logging(out_upload)
except:
    logging(traceback.format_exc())
    pass

subprocess.call(["rm", "-rf", tag_name])

